function [f fx fy fxp fyp G R set] = model_prog(param, set)

param = param_trans(param);
%Compute the Steady State
[XX, PI, W, H, Q, RP, D, C, GAMY, GAMH, GAMC, GAMQ, GAMD, GAMYP, YC, YCP, GAMHP, HC, HCP,GAM, S, HL, CL, QL, DL, GAMYL, YCL, YCLL, GAMHL, HCL, HCLL, EPS, RPL,XX_p, PI_p, W_p, H_p, Q_p, RP_p, D_p, C_p, GAMY_p, GAMH_p, GAMC_p, GAMQ_p, GAMD_p, GAMYP_p, YC_p, YCP_p, GAMHP_p, HC_p, HCP_p,GAM_p, S_p, HL_p, CL_p, QL_p, DL_p, GAMYL_p, YCL_p, YCLL_p, GAMHL_p, HCL_p, HCLL_p, EPS_p, RPL_p param set] = model_ss(param,set);

%Assign parameter values to named variables.
rho = param(1);
phi = param(2);
rhoa = param(3);
alph = param(4);
sigz = param(5);
sige = param(6);

%Assign set values to named variables.
bet = set(1);
gam = set(2);
eta = set(3);
pis = set(4);
mu = set(5);
hbar = set(6);
rho_r = set(7);
rbar = set(8);
lam = set(9);

%Evaluate F.
f = [[XX - W/H^(1/mu), 1 - (RP*XX*bet)/(GAM_p*PI_p*XX_p), 1 - (XX*bet*(D_p + Q_p))/(Q*XX_p), XX - C + S/GAM, C - D - H*W, C*(eta*(W - 1) + 1) - PI*W*phi*(PI - pis) + (PI_p*W_p*XX*bet*phi*(PI_p - pis))/XX_p, C - H + (phi*(PI - pis)^2)/2, log(RP) - log(EPS) - log(rbar) - alph*(log(PI) - log(pis)) - rho_r*(log(RPL) - log(rbar)), log(GAM_p/gam) - rhoa*log(GAM/gam), S_p - C*rho, HL_p - H, CL_p - C, QL_p - Q, DL_p - D, GAMY - (GAM*H)/HL, GAMH - H/HL, GAMC - (C*GAM)/CL, GAMQ - (GAM*Q)/QL, GAMD - (D*GAM)/DL, GAMYL_p - GAMY, YCL_p - YC, YCLL_p - YCL, GAMYP - GAMY_p, YCP - YC_p, log(YC) - lam*(3*log(GAMY) - log(GAMYL) - 3*log(GAMYP) + log(GAMYP_p)) + lam*(6*log(YC) - 4*log(YCL) + log(YCLL) - 4*log(YCP) + log(YCP_p)), GAMHL_p - GAMH, HCL_p - HC, HCLL_p - HCL, GAMHP - GAMH_p, HCP - HC_p, log(HC) - lam*(3*log(GAMH) - log(GAMHL) - 3*log(GAMHP) + log(GAMHP_p)) + lam*(6*log(HC) - 4*log(HCL) + log(HCLL) - 4*log(HCP) + log(HCP_p)), EPS_p - 1, RPL_p - RP]];
%Evaluate derivative expressions.
fx = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [-S/GAM, S/GAM, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -rho_r]; [-rhoa, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [-(GAM*H)/HL, 0, (GAM*H)/HL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, H/HL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [-(C*GAM)/CL, 0, 0, (C*GAM)/CL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [-(GAM*Q)/QL, 0, 0, 0, (GAM*Q)/QL, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [-(D*GAM)/DL, 0, 0, 0, 0, (D*GAM)/DL, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, -YCL, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, lam, -4*lam, lam, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -HCL, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, lam, -4*lam, lam, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]];
fy = [[XX, 0, -W/H^(1/mu), (H*W)/(H^(1/mu + 1)*mu), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [-(RP*XX*bet)/(GAM_p*PI_p*XX_p), 0, 0, 0, 0, -(RP*XX*bet)/(GAM_p*PI_p*XX_p), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [-(XX*bet*(D_p + Q_p))/(Q*XX_p), 0, 0, 0, (XX*bet*(D_p + Q_p))/(Q*XX_p), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [XX, 0, 0, 0, 0, 0, 0, -C, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, -H*W, -H*W, 0, 0, -D, C, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [(PI_p*W_p*XX*bet*phi*(PI_p - pis))/XX_p, - PI^2*W*phi - PI*W*phi*(PI - pis), C*W*eta - PI*W*phi*(PI - pis), 0, 0, 0, 0, C*(eta*(W - 1) + 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, PI*phi*(PI - pis), 0, -H, 0, 0, 0, C, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, -alph, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, -C*rho, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, -H, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, -C, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, -Q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, -D, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, -(GAM*H)/HL, 0, 0, 0, 0, GAMY, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, -H/HL, 0, 0, 0, 0, 0, GAMH, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, -(C*GAM)/CL, 0, 0, GAMC, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, -(GAM*Q)/QL, 0, 0, 0, 0, 0, 0, GAMQ, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, -(D*GAM)/DL, 0, 0, 0, 0, 0, GAMD, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, -GAMY, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -YC, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, GAMYP, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, YCP, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, -3*lam, 0, 0, 0, 0, 3*lam, 6*lam + 1, -4*lam, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, -GAMH, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -HC, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, GAMHP, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, HCP]; [0, 0, 0, 0, 0, 0, 0, 0, 0, -3*lam, 0, 0, 0, 0, 0, 0, 3*lam, 6*lam + 1, -4*lam]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, -RP, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]];
fxp = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [(RP*XX*bet)/(GAM_p*PI_p*XX_p), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, S_p, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, HL_p, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, CL_p, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, QL_p, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, DL_p, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, GAMYL_p, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, YCL_p, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, YCLL_p, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, GAMHL_p, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, HCL_p, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, HCLL_p, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, EPS_p, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, RPL_p]];
fyp = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [(RP*XX*bet)/(GAM_p*PI_p*XX_p), (RP*XX*bet)/(GAM_p*PI_p*XX_p), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [(XX*bet*(D_p + Q_p))/(Q*XX_p), 0, 0, 0, -(Q_p*XX*bet)/(Q*XX_p), 0, -(D_p*XX*bet)/(Q*XX_p), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [-(PI_p*W_p*XX*bet*phi*(PI_p - pis))/XX_p, (PI_p^2*W_p*XX*bet*phi)/XX_p + (PI_p*W_p*XX*bet*phi*(PI_p - pis))/XX_p, (PI_p*W_p*XX*bet*phi*(PI_p - pis))/XX_p, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, -GAMY_p, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -YC_p, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -lam, 0, lam, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, -GAMH_p, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -HC_p, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -lam, 0, lam]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]];
G = [[sigz, 0]; [0, 0]; [0, 0]; [0, 0]; [0, 0]; [0, 0]; [0, 0]; [0, 0]; [0, 0]; [0, 0]; [0, 0]; [0, 0]; [0, sige]; [0, 0]];
R = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]];
